@page "/"

<h1>Hello there!</h1>

<h4>Welcome to your new private forum for all our employees!</h4>
<h4 style="margin-bottom:30px;">Type you first hello to join the discussion!</h4>


<PageTitle>Chat Room</PageTitle>

@using BlazorApplication.Shared.Data
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorApplication.Shared
@inject NavigationManager NavigationManager
@implements IDisposable
@inject HttpClient Http

<div  style="margin-bottom:30px;" class="form-group">
    <label>
        User:
        <input @bind="userInput"/>
    </label>
  
</div>

<div  style="margin-bottom:30px;" class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50"/>
    </label>
  
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send

</button>

<hr>

<ul id="messageList">
    @foreach(var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code{
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private ChatData[] previousChats = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        previousChats = await Http.GetFromJsonAsync<ChatData[]>("Chat");

        if (previousChats != null)
        {
            foreach (var previousChat in previousChats)
            {
                var encondedMsg = $"{previousChat.User}: {previousChat.Message}";
                messages.Add(encondedMsg);
            }
        }

    }

    Task Send() =>
    hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }


}
